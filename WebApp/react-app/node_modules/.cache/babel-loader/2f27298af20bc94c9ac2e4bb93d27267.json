{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@aws-amplify/core\");\n/**\n* Default cache config\n*/\n\n\nexports.defaultConfig = {\n  keyPrefix: 'aws-amplify-cache',\n  capacityInBytes: 1048576,\n  itemMaxSize: 210000,\n  defaultTTL: 259200000,\n  defaultPriority: 5,\n  warningThreshold: 0.8,\n  // the storage helper will check if localStorage exists,\n  // if not, will use a in-memory object instead\n  storage: new core_1.StorageHelper().getStorage()\n};\n/**\n * return the byte size of the string\n * @param str\n */\n\nfunction getByteLength(str) {\n  var ret = 0;\n  ret = str.length;\n\n  for (var i = str.length; i >= 0; i -= 1) {\n    var charCode = str.charCodeAt(i);\n\n    if (charCode > 0x7f && charCode <= 0x7ff) {\n      ret += 1;\n    } else if (charCode > 0x7ff && charCode <= 0xffff) {\n      ret += 2;\n    } // trail surrogate\n\n\n    if (charCode >= 0xDC00 && charCode <= 0xDFFF) {\n      i -= 1;\n    }\n  }\n\n  return ret;\n}\n\nexports.getByteLength = getByteLength;\n/**\n * get current time\n */\n\nfunction getCurrTime() {\n  var currTime = new Date();\n  return currTime.getTime();\n}\n\nexports.getCurrTime = getCurrTime;\n/**\n * check if passed value is an integer\n */\n\nfunction isInteger(value) {\n  if (Number.isInteger) {\n    return Number.isInteger(value);\n  }\n\n  return _isInteger(value);\n}\n\nexports.isInteger = isInteger;\n\nfunction _isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n/**\n * provide an object as the in-memory cache\n */\n\n\nvar store = {};\n\nvar CacheObject =\n/** @class */\nfunction () {\n  function CacheObject() {}\n\n  CacheObject.clear = function () {\n    store = {};\n  };\n\n  CacheObject.getItem = function (key) {\n    return store[key] || null;\n  };\n\n  CacheObject.setItem = function (key, value) {\n    store[key] = value;\n  };\n\n  CacheObject.removeItem = function (key) {\n    delete store[key];\n  };\n\n  return CacheObject;\n}();\n\nexports.CacheObject = CacheObject;","map":null,"metadata":{},"sourceType":"script"}