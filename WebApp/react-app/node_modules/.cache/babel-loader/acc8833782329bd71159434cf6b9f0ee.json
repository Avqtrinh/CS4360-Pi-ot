{"ast":null,"code":"var util = require('./util');\n\nvar regionConfig = require('./region_config_data.json');\n\nfunction generateRegionPrefix(region) {\n  if (!region) return null;\n  var parts = region.split('-');\n  if (parts.length < 3) return null;\n  return parts.slice(0, parts.length - 2).join('-') + '-*';\n}\n\nfunction derivedKeys(service) {\n  var region = service.config.region;\n  var regionPrefix = generateRegionPrefix(region);\n  var endpointPrefix = service.api.endpointPrefix;\n  return [[region, endpointPrefix], [regionPrefix, endpointPrefix], [region, '*'], [regionPrefix, '*'], ['*', endpointPrefix], ['*', '*']].map(function (item) {\n    return item[0] && item[1] ? item.join('/') : null;\n  });\n}\n\nfunction applyConfig(service, config) {\n  util.each(config, function (key, value) {\n    if (key === 'globalEndpoint') return;\n\n    if (service.config[key] === undefined || service.config[key] === null) {\n      service.config[key] = value;\n    }\n  });\n}\n\nfunction configureEndpoint(service) {\n  var keys = derivedKeys(service);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!key) continue;\n\n    if (Object.prototype.hasOwnProperty.call(regionConfig.rules, key)) {\n      var config = regionConfig.rules[key];\n\n      if (typeof config === 'string') {\n        config = regionConfig.patterns[config];\n      } // set dualstack endpoint\n\n\n      if (service.config.useDualstack && util.isDualstackAvailable(service)) {\n        config = util.copy(config);\n        config.endpoint = '{service}.dualstack.{region}.amazonaws.com';\n      } // set global endpoint\n\n\n      service.isGlobalEndpoint = !!config.globalEndpoint; // signature version\n\n      if (!config.signatureVersion) config.signatureVersion = 'v4'; // merge config\n\n      applyConfig(service, config);\n      return;\n    }\n  }\n}\n/**\n * @api private\n */\n\n\nmodule.exports = configureEndpoint;","map":null,"metadata":{},"sourceType":"script"}