'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


function heuristicCheck(arg) {
  try {
    var shouldBeEmptyEnzyme = arg.find('asjdfsaf');
    return shouldBeEmptyEnzyme.length === 0;
  } catch (e) {
    return false;
  }
} /**
   * @function protectAssertion
   *
   * This should wrap every assertion this library outputs.
   * It is intended to help with developers to understand errors
   * when an enzyme-matchers assertion is used with a non-enzyme object.
   *
   * 
   */

var ERROR_MESSAGE = function ERROR_MESSAGE(assertion) {
  return 'The test assertion ' + assertion.name + ' is part of the enzyme-matcher suite.\nIt appears you tried calling this matcher with a non-enzyme object.\nThis assertion must be called against a shallow, mount, or render-ed react component.\n';
};

var protectAssertion = function protectAssertion(assertion) {
  return function assertionWrapper(enzymeWrapper) {
    if (heuristicCheck(enzymeWrapper) === false) {
      throw new Error(ERROR_MESSAGE(assertion));
    }

    // Using `.call` to make sure we bind the runtime environment into the Matcher
    // so we can use asymmetric equalities.

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return assertion.call.apply(assertion, [this, enzymeWrapper].concat(args));
  };
};

exports.default = protectAssertion;
module.exports = exports['default'];