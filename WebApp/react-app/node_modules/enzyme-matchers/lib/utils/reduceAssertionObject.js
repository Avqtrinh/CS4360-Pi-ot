'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = reduceAssertionObject;

var _deepEqualIdent = require('deep-equal-ident');

var _deepEqualIdent2 = _interopRequireDefault(_deepEqualIdent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function reduceAssertionObject(componentDetails, objectOrKey, potentialValue) {
  var matcherDetails = (typeof objectOrKey === 'undefined' ? 'undefined' : _typeof(objectOrKey)) === 'object' && !Array.isArray(objectOrKey) ? objectOrKey : _defineProperty({}, objectOrKey, potentialValue);

  var equals = this && this.equals ? this.equals : _deepEqualIdent2.default;

  return Object.keys(matcherDetails).reduce(function (prevVal, key) {
    var retVal = _extends({}, prevVal);
    var match = equals(componentDetails[key], matcherDetails[key]);
    retVal.actual[key] = componentDetails[key];
    retVal.expected[key] = matcherDetails[key];

    /*
     * This check helps us give better error messages when the componentDetails doesnt
     * include a specific key at all.
     */
    if (!componentDetails.hasOwnProperty(key)) {
      retVal.missingKeys.push(key);
      retVal.pass = false;
      return retVal;
    }

    /*
     * This is just a list of anything that fails to match.
     */
    if (!match) {
      retVal.unmatchedKeys.push(key);
    }

    /*
     * We only want to update if it was previous pass.
     * If one fails, its all a fail
     */
    if (retVal.pass) {
      retVal.pass = match;
    }

    return retVal;
  }, {
    actual: {},
    expected: {},
    pass: true,
    missingKeys: [],
    unmatchedKeys: []
  });
}
module.exports = exports['default'];